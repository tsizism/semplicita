latitude=192.168.2.200 - wrk
amd=201 - wkr
asus=202 -  wkr
aceri3=203 - mgr
aceri5=192.168.2.205 - mgr aceri5.lln3nc.ca

mark@latitude:~$ sudo vi /etc/hosts
127.0.0.1 localhost backend

Web Browser Host
"C:\Windows\System32\drivers\etc\hosts"
# Swarm workers
192.168.2.200       backend
192.168.2.201       backend
192.168.2.202       backend

127.0.0.1 kubernetes.docker.internal broker-service


netstat -ntulp | grep dockerd

Setup vi color
echo 'syntax off' > .vimrc

alias h='history'
alias la='ls -ltr'
alias lt='ls -trl'
alias l.='ls -lad .*'
alias lz='ls -lSr .*'
alias gs='git status'
alias gd='git diff'
alias src='source ~/.bashrc'
alias d='docker'
alias dcl='docker container ls'
alias dlt='docker logs -f -t '
alias k='kubectl'

ls command color:
LS_COLORS=$LS_COLORS:'di=0;35:' ; export LS_COLORS

Prompt Color:
PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
	                                        									______

PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;97m\]\w\[\033[00m\]\$ '

Black-0;30 Red-0;31 Green-0;32 Brown-0;33 Blue-0;34 Magenta-0;35 Cyan-0;36 White-0;37
Replace 0 with 1 to get a light colored version.

Setup ssh
ssh-keygen -t rsa
Copy client pub key to node's authorized_keys
ssh-copy-id -i id_rsa.pub mark@latitude

Optional:
sudo hostnamectl set-hostname node-1
adduser mark

Access:
sudo usermod -aG sudo mark   -- mark has sudo privilages 
sudo usermod -aG docker mark

Check user's usergroups: <id mark>

sudo systemctl status docker
sudo systemctl status docker.service

Install Docker:
https://docs.docker.com/engine/install/ubuntu/
....
 
sudo usermod -aG docker mark
docker run hello-world

Optional:
d completion bash > ~/.config/bash/completions/docker.bash

d system info

cd /
sudo mkdir /swarm
sudo chown -R  mark:mark /swarm
cd swarm/
mkdir -p /swarm/caddy_data /swarm/caddy_config /swarm/db-data/mongo /swarm/db-data/postgres

On NFS Server:

echo 2716017 | sudo -S umount /swarm/db-data/ -o password_stdin
echo 2716017 | sudo -S umount /swarm/caddy_config/ -o password_stdin
echo 2716017 | sudo -S umount /swarm/caddy_data/ -o password_stdin

echo 2716017 | sudo -S sshfs -o allow_other,default_permissions mark@latitude:/swarm/caddy_data/ /swarm/caddy_data/ -o password_stdin
echo 2716017 | sudo -S sshfs -o allow_other,default_permissions mark@latitude:/swarm/caddy_config/ /swarm/caddy_config/ -o password_stdin
echo 2716017 | sudo -S sshfs -o allow_other,default_permissions mark@latitude:/swarm/db-data/ /swarm/db-data/ -o password_stdin

echo 6132716017 | sudo -S sshfs -o allow_other,default_permissions mark@amd:/swarm/caddy_data/ /swarm/caddy_data/ -o password_stdin
echo 6132716017 | sudo -S sshfs -o allow_other,default_permissions mark@amd:/swarm/caddy_config/ /swarm/caddy_config/  -o password_stdin
echo 6132716017 | sudo -S sshfs -o allow_other,default_permissions mark@amd:/swarm/db-data/ /swarm/db-data/  -o password_stdin



findmnt | grep sshfs

Docker Shell autocomplition  https://www.techrepublic.com/article/enable-docker-command-completion/
sudo apt-get install bash-completion -y
sudo curl https://raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker -o /etc/bash_completion.d/docker.sh

pgAdmin4   https://www.pgadmin.org/   sudo apt install pgadmin4-desktop
+Postrgess: /Users/Shared/semplicita/linux/project/docker-compose.yaml(postrgess/password), pgAdmin --> Server : authserver --> Database: users --> 
Query Tool --> select * from users
SSH Tunnel: db hostname,  hostname username & password


+https://www.mongodb.com/docs/compass/current/install/#std-label-download-install
+sudo apt install ./mongodb-compass_1.45.0_amd64.deb
Mongo:   MongoDB Compass --> Connect using 'trace' connection "mongodb://admin:password@node-1.lln3nc.ca:27017/" --> Database:  trace --> Collection trace

mongodb://admin:password@latitude:27017/


Docker cleanup
d stack rm my app 
docker rm -vf $(docker ps -aq)
docker rmi -f $(docker images -aq)

Firewall:

Swarm Ports
Port 2377 TCP for communication with and between manager nodes
Port 7946 TCP/UDP for overlay network node discovery
Port 4789 UDP (configurable) for overlay network traffic

sudo ufw allow ssh
sudo ufw allow http
sudo ufw allow https
sudo ufw allow 2377/tcp
sudo ufw allow 7946/tcp
sudo ufw allow 7946/udp
sudo ufw allow 4789/1udp
sudo ufw allow 8025/tcp
sudo ufw allow 27017/tcp
sudo ufw enable
sudo ufw status

To                         Action      From
--                         ------      ----
22/tcp                     ALLOW       Anywhere
80/tcp                     ALLOW       Anywhere
443                        ALLOW       Anywhere
2377/tcp                   ALLOW       Anywhere
7946/tcp                   ALLOW       Anywhere
7946/udp                   ALLOW       Anywhere
4789/udp                   ALLOW       Anywhere
8025/tcp                   ALLOW       Anywhere
22/tcp (v6)                ALLOW       Anywhere (v6)
80/tcp (v6)                ALLOW       Anywhere (v6)
443 (v6)                   ALLOW       Anywhere (v6)
2377/tcp (v6)              ALLOW       Anywhere (v6)
7946/tcp (v6)              ALLOW       Anywhere (v6)
7946/udp (v6)              ALLOW       Anywhere (v6)
4789/udp (v6)              ALLOW       Anywhere (v6)
8025/tcp (v6)              ALLOW       Anywhere (v6)

mark@aceri5:~$ docker swarm init  --advertise-addr 192.168.2.205
Swarm initialized: current node (9x9h6ajs887n3nujooli3734i) is now a manager.
To add a worker to this swarm, run the following command:
    docker swarm join --token SWMTKN-1-2thgobrruf5wf6heat1c08ohesbmmat8obqoavr2swz30apugu-eat2c5nfoidrrriwkqjha4un9 192.168.2.205:2377
To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

or, on manager
d swarm join-token worker

d info | grep -E '(Swarm|Name|Nodes|Cluster|NodeID|Node Address|Managers)'.*

mark@latitude:~$  docker swarm join --token SWMTKN-1-2la96jh7fvtutg8ugr6xl7cna7vss1ejozmuscy9jlx9rf9icp-dy90vwnvl6yr5nf0q24avxn0m 192.168.2.205:2377
This node joined a swarm as a worker.

master:
d stack ls
d stack services myapp
d stack ps       myapp | egrep Run
d stack ps myapp --no-trunc
d service ps
watch -t -d -n 0.5 docker node ps
docker service ps --format "table ...(3.7)
docker node inspect self --pretty
d service ls
d node ps $(docker node ls -q) | grep -i running
d service scale mayapp_caddy=2
d service update --image tsizism/mycaddy-stg:1.0 myapp_caddy

watch 'docker service ps --format table {{.Name}}\t{{.Node}}\t{{.DesiredState}}\t{{.CurrentState}}\t{{.Error}}"  $(docker service ls -q)'
watch -t -d -n 0.5 'docker service ps  --format "table {{.Name}}\t{{.Node}}\t{{.DesiredState}}\t{{.CurrentState}}\t{{.Error}}"  $(docker service ls -q)'
watch -t -d -n 0.5 'docker service ps  --format "table {{.Name}}\t{{.Node}}\t{{.DesiredState}}\t{{.CurrentState}}\t{{.Error}}"  myapp_broker-service'
docker service inspect  myapp_broker-service


d service ps $(d service ls -q) | grep Running

Worker:
docker context ls
docker context use default
d swarm leave -f
docker node ls

docker stack deploy -c swarm.prd.yaml myapp
d service ls
d node ps latitude

d exec -it 05 /bin/sh
docker exec -it 05 nslookup trace-service

Network:
netstat -ln | grep 8080
sudo netstat -tulpn | grep 8080
curl -v http://localhost:8080/

docker network ls
docker network inspect myapp_default
docker network inspect ingress
docker network inspect docker_gwbridge


_______________________________________________________________________________________


Digital ocean is very popular and you know, they work very well.
And another popular one is Vultr, which is also relatively cost effective.

DigitalOceane has a really good tutorial on hardening and Ubuntu 20.04 server.
I have a course on Udemy about securing VPNs and it happens to use Ubuntu 20.04 as the version.

Domain: http://lln3nc.ca
VMs: https://cloud.linode.com/linodes 172.105.6.250

DNS from: https://whc.ca
Node1 A 172.105.6.250
swarm A 172.105.6.250
broker CNAME swarm.lln3nc.ca.

Linode
Currently in list view
node1	Running Nanode 1 GB	172.105.6.250 CA, Toronto

ssh root@172.105.6.250
ssh -t tsizism@lish-ca-central.linode.com node-1
ssh -t mark@lish-ca-central.linode.com node-1
ssh mark@172.105.6.250
hostname
sudo hostnamectl set-hostname node-1

adduser mark
sudo usermod -aG sudo mark   -- mark has sudo privilages 
sudo usermod -aG docker mark

d node ps
d node ps latitude
d service ps

MailHog: http://swarm.lln3nc.ca:8025/

d info | grep -E '(Swarm|Name|Nodes|Cluster|NodeID|Node Address)'.*
__toggle_docker_context_promp

docker logs da 2>&1   | grep 8080

sudo systemctl status docker.service
sudo systemctl restart docker.service

Visualizer
Z:\LossLess\7.swProjects\Pluralsight\docker\docker-swarm-getting-started\course2-swarm-gs\examples\stacks\viz\README.md

https://github.com/moby/swarmkit