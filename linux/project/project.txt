skill -STOP -u mark

Docker Shell autocomplition  https://www.techrepublic.com/article/enable-docker-command-completion/
sudo apt-get install bash-completion -y
sudo curl https://raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker -o /etc/bash_completion.d/docker.sh


https://github.com/tsizism
git config --global user.email tsizism@gmail.com
git config --global user.name mark
git init -b main
git branch -a  
git add .
git config --list --global
git config --global --add safe.directory '*'
git config --global --edit

echo -n 'Z2hwX3IybWJQVEFTN3BTY0d2NjdxeWtjdTRoOFZWUXNJSDN1MVNuRQ==' | base64 -d

sudo dpkg -i 
sudo apt update


Insatll VSCode and Go extension
brew install go
brew install make
Install docker desktop and vscode extension 

6 things you can do with GitHub Copilot — for free (Sponsor)
1️⃣ Edit and add multiple files at once with Copilot Edits (HUGE timesaver).
2️⃣ Chat with and about your code using GPT or Claude.
3️⃣ Use inline code completions to generate snippets or boilerplate.
4️⃣ Debug your code, ask Copilot why it isn't working, and work together to root-cause the issue.
5️⃣ Generate technical documentation for sections of code or entire repositories.
6️⃣ Generate tests for your utilities, run them, and fix any failing ones in a snap.


Install jinliming2 - Go Template Support extension 

go mod init github.com/tsizism/semplicita/linux/broker

https://github.com/go-chi/chi
go get -u github.com/go-chi/chi/v5
go get -u github.com/go-chi/chi/v5/middleware
go get -u github.com/go-chi/cors


https://pkg.go.dev/cmd/go/internal/get
The -u flag instructs get to use the network to update the named packages
and their dependencies. By default, get uses the network to check out
missing packages but does not use it to look for updates to existing packages.

// Postgres Go client
go get github.com/jackc/pgconn
go get github.com/jackc/pgx/v4
go get github.com/jackc/pgx/v4/stdlib

go get github.com/jackc/pgx/v4@none
go get github.com/jackc/pgx/v4/stdlib@none

go get github.com/jackc/pgconn
go get github.com/jackc/pgx/v5
go get github.com/jackc/pgx/v5/stdlib

go get go.mongodb.org/mongo-driver/mongo
go get go.mongodb.org/mongo-driver/mongo/options

go get github.com/rs/cors

go get github.com/vanng822/go-premailer/premailer
go get github.com/xhit/go-simple-mail/v2

go get github.com/rabbitmq/amqp091-go

https://www.beekeeperstudio.io/  - 4 pay

pgAdmin4   https://www.pgadmin.org/
Postrgess: /Users/Shared/semplicita/linux/project/docker-compose.yaml, pgAdmin --> Server : authserver --> Database: users --> Query Tool --> select * from users
https://www.mongodb.com/try/download/compass
Mongo:     MongoDB Compass --> Connect using 'trace' connection "mongodb://admin:password@localhost:27017/" --> Database:  trace --> Collection trace
MailHog:   http://localhost:8025/

gRPC
____
https://grpc.io/docs/languages/go/quickstart/
go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

go get google.golang.org/grpc
go get google.golang.org/protobuf

https://grpc.io/docs/protoc-installation/
https://github.com/protocolbuffers/protobuf/releases/download/v29.1/protoc-29.1-win64.zip

Mac:
volumes visiable on Mac - /Users/Shared/semplicita/linux/project/db-data

--------------------------
docker registry

d login -u tsizism   // D-!

# make -f Makefile.linux.mak build
# from /home/mark/github/semplicita/linux/project
d build --no-cache -f ../authentication-service/dockerfile -t tsizism/authentication-service:1.0 ../authentication-service
d build --no-cache -f ../broker-service/dockerfile -t tsizism/broker-service:1.0 ../broker-service
d build --no-cache -f ../listener-service/dockerfile -t tsizism/listener-service:1.0 ../listener-service
d build --no-cache -f ../mail-service/dockerfile -t tsizism/mail-service:1.0 ../mail-service
d build --no-cache -f ../trace-service/dockerfile -t tsizism/trace-service:1.0 ../trace-service
d build --no-cache -f ../fe/dockerfile -t tsizism/fe:1.0 ../fe

!!!!!!!!!!!!!!!!!!!!!DONT FORGET TO BUILD EXEC!!!!!!!!!!!!!!
!!!!!       make -f Makefile.linux.mak build         !!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


So whenever you do docker build -t 'es:6.1' . you also need to run docker tag es:6.1 <username>/es:6.1

d tag tsizism/fe:1.0 tsizism/fe:1.0

# there is no command line option to remove image from the hub

d push tsizism/authentication-service:1.0
d push tsizism/broker-service:1.0
d push tsizism/listener-service:1.0
d push tsizism/mail-service:1.0
d push tsizism/trace-service:1.0
d push tsizism/fe:1.0

d pull tsizism/authentication-service:1.0
d pull tsizism/broker-service:1.0
d pull tsizism/listener-service:1.0
d pull tsizism/mail-service:1.0
d pull tsizism/trace-service:1.0
d pull tsizism/fe:1.0

Swarm
https://docs.docker.com/engine/swarm/stack-deploy/

d service ls
>Error response from daemon: This node is not a swarm manager. 
>Use "docker swarm init" or "docker swarm join" to connect this node to swarm and try again.

1.
docker stack rm semplicita_swarm
2. 
d swarm init
    docker swarm join --token SWMTKN-1-2bg99crkwkthd1eno57fu90os3wwiwi4x17esdxrx3xlw1dn8l-1ex1uur6r2nya8552fds2ngjj 192.168.65.9:2377
    To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.    

d swarm join-token manager -- get join command with tocken for manager
d swarm join-token worker  -- get join command with tocken for worker

3.
d stack deploy -c swarm.yaml semplicita_swarm

docker service scale semplicita_swarm_listener-service=3
d service update --image tsizism/fe:1.0 semplicita_swarm_fe
docker service scale semplicita_swarm_listener-service=0  -- brings service down
docker service rm semplicita_swarm_fe

docker swarm leave -f -- for manager 
docker node rm -- Remove one or more nodes from the swarm. This is a cluster management command, and must be executed on a swarm manager node. 
# Bring Swarm down
docker stack rm semplicita_swarm


Caddy
_____
https://caddyserver.com/
d build --no-cache -f caddy.dockerfile -t tsizism/mycaddy:1.0 .
d push tsizism/mycaddy:1.0

d build --no-cache -f caddy.prd.dockerfile -t tsizism/mycaddy-prd:1.0 .
d push tsizism/mycaddy-prd:1.0
d pull tsizism/mycaddy-prd:1.0

d build --no-cache -f caddy.stg.dockerfile -t tsizism/mycaddy-stg:1.0 .
d push tsizism/mycaddy-stg:1.0
d pull tsizism/mycaddy-stg:1.0

mark@latitude:~$ sudo vi /etc/hosts
127.0.0.1 localhost broker
::1     ip6-localhost ip6-loopback broker

Web Browser
"C:\Windows\System32\drivers\etc\hosts"
192.168.2.200       backend
192.168.2.203       backend


netstat -ln | grep 8080
sudo netstat -tulpn | grep 8080
curl -v http://localhost:8080/


# for Windows --> https://www.thewindowsclub.com/hosts-file-in-windows

sudo systemctl status apache2.service
sudo systemctl start apache2.service
sudo systemctl stop apache2.service
sudo systemctl restart apache2.service

docker logs -f --tail 10 container_name
d logs -f --tail 10 2c

docker logs da 2>&1   | grep 8080

mode: global - keep an instanance on every node of the swarm

Shared volumes
https://www.gluster.org/
https://phoenixnap.com/kb/sshfs